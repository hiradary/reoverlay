"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
Object.defineProperty(exports, "Indicator", {
  enumerable: true,
  get: function () {
    return _Indicator.default;
  }
});
Object.defineProperty(exports, "Item", {
  enumerable: true,
  get: function () {
    return _Item.default;
  }
});
exports.default = void 0;

var _react = _interopRequireWildcard(require("react"));

var _propTypes = _interopRequireDefault(require("prop-types"));

var _lodash = _interopRequireDefault(require("lodash.isequal"));

var _arrRotate = _interopRequireDefault(require("arr-rotate"));

var _ink = require("ink");

var _Indicator = _interopRequireDefault(require("./Indicator"));

var _Item = _interopRequireDefault(require("./Item"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) { var desc = Object.defineProperty && Object.getOwnPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : {}; if (desc.get || desc.set) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } } newObj.default = obj; return newObj; } }

function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

const ARROW_UP = '\u001B[A';
const ARROW_DOWN = '\u001B[B';
const ENTER = '\r';

class SelectInput extends _react.PureComponent {
  constructor(...args) {
    super(...args);

    _defineProperty(this, "state", {
      rotateIndex: 0,
      selectedIndex: this.props.initialIndex
    });

    _defineProperty(this, "handleInput", data => {
      const {
        items,
        focus,
        onSelect,
        onHighlight
      } = this.props;
      const {
        rotateIndex,
        selectedIndex
      } = this.state;
      const hasLimit = this.hasLimit();
      const limit = this.getLimit();

      if (focus === false) {
        return;
      }

      const s = String(data);

      if (s === ARROW_UP || s === 'k') {
        const lastIndex = (hasLimit ? limit : items.length) - 1;
        const atFirstIndex = selectedIndex === 0;
        const nextIndex = hasLimit ? selectedIndex : lastIndex;
        const nextRotateIndex = atFirstIndex ? rotateIndex + 1 : rotateIndex;
        const nextSelectedIndex = atFirstIndex ? nextIndex : selectedIndex - 1;
        this.setState({
          rotateIndex: nextRotateIndex,
          selectedIndex: nextSelectedIndex
        });
        const slicedItems = hasLimit ? (0, _arrRotate.default)(items, nextRotateIndex).slice(0, limit) : items;
        onHighlight(slicedItems[nextSelectedIndex]);
      }

      if (s === ARROW_DOWN || s === 'j') {
        const atLastIndex = selectedIndex === (hasLimit ? limit : items.length) - 1;
        const nextIndex = hasLimit ? selectedIndex : 0;
        const nextRotateIndex = atLastIndex ? rotateIndex - 1 : rotateIndex;
        const nextSelectedIndex = atLastIndex ? nextIndex : selectedIndex + 1;
        this.setState({
          rotateIndex: nextRotateIndex,
          selectedIndex: nextSelectedIndex
        });
        const slicedItems = hasLimit ? (0, _arrRotate.default)(items, nextRotateIndex).slice(0, limit) : items;
        onHighlight(slicedItems[nextSelectedIndex]);
      }

      if (s === ENTER) {
        const slicedItems = hasLimit ? (0, _arrRotate.default)(items, rotateIndex).slice(0, limit) : items;
        onSelect(slicedItems[selectedIndex]);
      }
    });

    _defineProperty(this, "hasLimit", () => {
      const {
        limit,
        items
      } = this.props;
      return typeof limit === 'number' && items.length > limit;
    });

    _defineProperty(this, "getLimit", () => {
      const {
        limit,
        items
      } = this.props;

      if (this.hasLimit()) {
        return Math.min(limit, items.length);
      }

      return items.length;
    });
  }

  render() {
    const {
      items,
      indicatorComponent,
      itemComponent
    } = this.props;
    const {
      rotateIndex,
      selectedIndex
    } = this.state;
    const limit = this.getLimit();
    const slicedItems = this.hasLimit() ? (0, _arrRotate.default)(items, rotateIndex).slice(0, limit) : items;
    return _react.default.createElement(_ink.Box, {
      flexDirection: "column"
    }, slicedItems.map((item, index) => {
      const isSelected = index === selectedIndex;
      return _react.default.createElement(_ink.Box, {
        key: item.key || item.value
      }, _react.default.createElement(indicatorComponent, {
        isSelected
      }), _react.default.createElement(itemComponent, { ...item,
        isSelected
      }));
    }));
  }

  componentDidMount() {
    const {
      stdin,
      setRawMode
    } = this.props;
    setRawMode(true);
    stdin.on('data', this.handleInput);
  }

  componentWillUnmount() {
    const {
      stdin,
      setRawMode
    } = this.props;
    stdin.removeListener('data', this.handleInput);
    setRawMode(false);
  }

  componentDidUpdate(prevProps) {
    if (!(0, _lodash.default)(prevProps.items, this.props.items)) {
      this.setState({
        // eslint-disable-line react/no-did-update-set-state
        rotateIndex: 0,
        selectedIndex: 0
      });
    }
  }

}

_defineProperty(SelectInput, "propTypes", {
  items: _propTypes.default.array,
  focus: _propTypes.default.bool,
  initialIndex: _propTypes.default.number,
  indicatorComponent: _propTypes.default.func,
  itemComponent: _propTypes.default.func,
  limit: _propTypes.default.number,
  stdin: _propTypes.default.object.isRequired,
  setRawMode: _propTypes.default.func.isRequired,
  onSelect: _propTypes.default.func,
  onHighlight: _propTypes.default.func
});

_defineProperty(SelectInput, "defaultProps", {
  items: [],
  focus: true,
  initialIndex: 0,
  indicatorComponent: _Indicator.default,
  itemComponent: _Item.default,
  limit: null,

  onSelect() {},

  onHighlight() {}

});

class SelectInputWithStdin extends _react.PureComponent {
  render() {
    return _react.default.createElement(_ink.StdinContext.Consumer, null, ({
      stdin,
      setRawMode
    }) => _react.default.createElement(SelectInput, _extends({}, this.props, {
      stdin: stdin,
      setRawMode: setRawMode
    })));
  }

}

exports.default = SelectInputWithStdin;