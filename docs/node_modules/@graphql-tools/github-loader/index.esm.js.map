{"version":3,"file":"index.esm.js","sources":["../../../dist/loaders/github/src/index.js"],"sourcesContent":["import { parseGraphQLSDL, parseGraphQLJSON } from '@graphql-tools/utils';\nimport { fetch } from 'cross-fetch';\nimport { gqlPluckFromCodeString } from '@graphql-tools/graphql-tag-pluck';\n// github:owner/name#ref:path/to/file\nfunction extractData(pointer) {\n    const [repo, file] = pointer.split('#');\n    const [owner, name] = repo.split(':')[1].split('/');\n    const [ref, path] = file.split(':');\n    return {\n        owner,\n        name,\n        ref,\n        path,\n    };\n}\nexport class GithubLoader {\n    loaderId() {\n        return 'github-loader';\n    }\n    async canLoad(pointer) {\n        return typeof pointer === 'string' && pointer.toLowerCase().startsWith('github:');\n    }\n    canLoadSync() {\n        return false;\n    }\n    async load(pointer, options) {\n        const { owner, name, ref, path } = extractData(pointer);\n        const request = await fetch('https://api.github.com/graphql', {\n            method: 'POST',\n            headers: {\n                'Content-Type': 'application/json; charset=utf-8',\n                Authorization: `bearer ${options.token}`,\n            },\n            body: JSON.stringify({\n                query: `\n          query GetGraphQLSchemaForGraphQLtools($owner: String!, $name: String!, $expression: String!) {\n            repository(owner: $owner, name: $name) {\n              object(expression: $expression) {\n                ... on Blob {\n                  text\n                }\n              }\n            }\n          }\n        `,\n                variables: {\n                    owner,\n                    name,\n                    expression: ref + ':' + path,\n                },\n                operationName: 'GetGraphQLSchemaForGraphQLtools',\n            }),\n        });\n        const response = await request.json();\n        let errorMessage = null;\n        if (response.errors && response.errors.length > 0) {\n            errorMessage = response.errors.map((item) => item.message).join(', ');\n        }\n        else if (!response.data) {\n            errorMessage = response;\n        }\n        if (errorMessage) {\n            throw new Error('Unable to download schema from github: ' + errorMessage);\n        }\n        const content = response.data.repository.object.text;\n        if (/\\.(gql|graphql)s?$/i.test(path)) {\n            return parseGraphQLSDL(pointer, content, options);\n        }\n        if (/\\.json$/i.test(path)) {\n            return parseGraphQLJSON(pointer, content, options);\n        }\n        const rawSDL = await gqlPluckFromCodeString(pointer, content, options.pluckConfig);\n        if (rawSDL) {\n            return {\n                location: pointer,\n                rawSDL,\n            };\n        }\n        throw new Error(`Invalid file extension: ${path}`);\n    }\n    loadSync() {\n        throw new Error('Loader GitHub has no sync mode');\n    }\n}\n//# sourceMappingURL=index.js.map"],"names":[],"mappings":"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"}