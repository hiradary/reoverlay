{"version":3,"sources":["../../src/bootstrap/resolve-module-exports.ts"],"names":["staticallyAnalyzeExports","modulePath","resolver","require","resolve","absPath","exportNames","err","code","fs","readFileSync","ast","SyntaxError","codeFrame","start","loc","highlightCode","report","panic","message","isCommonJS","isES6","ImportDeclaration","ExportNamedDeclaration","astPath","declaration","node","type","declarations","id","push","name","ExportSpecifier","exportName","ExportDefaultDeclaration","AssignmentExpression","nodeLeft","left","property","process","env","NODE_ENV","resolveModuleExports","mode","Object","keys","filter","e"],"mappings":"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","sourcesContent":["import fs from \"fs\"\nimport traverse from \"@babel/traverse\"\nimport get from \"lodash/get\"\nimport { codeFrameColumns, SourceLocation } from \"@babel/code-frame\"\nimport { babelParseToAst } from \"../utils/babel-parse-to-ast\"\nimport report from \"gatsby-cli/lib/reporter\"\n\nimport { testRequireError } from \"../utils/test-require-error\"\n\nconst staticallyAnalyzeExports = (\n  modulePath: string,\n  resolver = require.resolve\n): string[] => {\n  let absPath: string | undefined\n  const exportNames: string[] = []\n\n  try {\n    absPath = resolver(modulePath)\n  } catch (err) {\n    return exportNames // doesn't exist\n  }\n  const code = fs.readFileSync(absPath, `utf8`) // get file contents\n\n  let ast\n  try {\n    ast = babelParseToAst(code, absPath)\n  } catch (err) {\n    if (err instanceof SyntaxError) {\n      // Pretty print syntax errors\n      const codeFrame = codeFrameColumns(\n        code,\n        {\n          start: ((err as unknown) as { loc: SourceLocation[\"start\"] }).loc,\n        },\n        {\n          highlightCode: true,\n        }\n      )\n\n      report.panic(\n        `Syntax error in \"${absPath}\":\\n${err.message}\\n${codeFrame}`\n      )\n    } else {\n      // if it's not syntax error, just throw it\n      throw err\n    }\n  }\n\n  let isCommonJS = false\n  let isES6 = false\n\n  // extract names of exports from file\n  traverse(ast, {\n    // Check if the file is using ES6 imports\n    ImportDeclaration: function ImportDeclaration() {\n      isES6 = true\n    },\n\n    ExportNamedDeclaration: function ExportNamedDeclaration(astPath) {\n      const declaration = astPath.node.declaration\n\n      // get foo from `export const foo = bar`\n      if (\n        declaration?.type === `VariableDeclaration` &&\n        declaration.declarations[0]?.id.type === `Identifier`\n      ) {\n        isES6 = true\n        exportNames.push(declaration.declarations[0].id.name)\n      }\n\n      // get foo from `export function foo()`\n      if (\n        declaration?.type === `FunctionDeclaration` &&\n        declaration.id?.type === `Identifier`\n      ) {\n        isES6 = true\n        exportNames.push(declaration.id.name)\n      }\n    },\n\n    // get foo from `export { foo } from 'bar'`\n    // get foo from `export { foo }`\n    ExportSpecifier: function ExportSpecifier(astPath) {\n      const exportName = get(astPath, `node.exported.name`)\n      isES6 = true\n      if (exportName) exportNames.push(exportName)\n    },\n\n    // export default () => {}\n    // const foo = () => {}; export default foo\n    ExportDefaultDeclaration: function ExportDefaultDeclaration(astPath) {\n      const name = get(astPath, `node.declaration.name`)\n      const exportName = `export default${name ? ` ${name}` : ``}`\n      isES6 = true\n      exportNames.push(exportName)\n    },\n\n    AssignmentExpression: function AssignmentExpression(astPath) {\n      const nodeLeft = astPath.node.left\n\n      if (nodeLeft.type !== `MemberExpression`) return\n\n      // ignore marker property `__esModule`\n      if (get(nodeLeft, `property.name`) === `__esModule`) return\n\n      // get foo from `exports.foo = bar`\n      if (get(nodeLeft, `object.name`) === `exports`) {\n        isCommonJS = true\n        exportNames.push(nodeLeft.property.name)\n      }\n\n      // get foo from `module.exports.foo = bar`\n      if (\n        get(nodeLeft, `object.object.name`) === `module` &&\n        get(nodeLeft, `object.property.name`) === `exports`\n      ) {\n        isCommonJS = true\n        exportNames.push(nodeLeft.property.name)\n      }\n    },\n  })\n\n  if (isES6 && isCommonJS && process.env.NODE_ENV !== `test`) {\n    report.panic(\n      `This plugin file is using both CommonJS and ES6 module systems together which we don't support.\nYou'll need to edit the file to use just one or the other.\n\nplugin: ${modulePath}.js\n\nThis didn't cause a problem in Gatsby v1 so you might want to review the migration doc for this:\nhttps://gatsby.dev/no-mixed-modules\n      `\n    )\n  }\n  return exportNames\n}\n\n/**\n * Given a `require.resolve()` compatible path pointing to a JS module,\n * return an array listing the names of the module's exports.\n *\n * Returns [] for invalid paths and modules without exports.\n *\n * @param modulePath\n * @param mode\n * @param resolver\n */\nexport const resolveModuleExports = (\n  modulePath: string,\n  { mode = `analysis`, resolver = require.resolve } = {}\n): string[] => {\n  if (mode === `require`) {\n    let absPath: string | undefined\n    try {\n      absPath = resolver(modulePath)\n      return Object.keys(require(modulePath)).filter(\n        exportName => exportName !== `__esModule`\n      )\n    } catch (e) {\n      if (!testRequireError(modulePath, e)) {\n        // if module exists, but requiring it cause errors,\n        // show the error to the user and terminate build\n        report.panic(`Error in \"${absPath}\":`, e)\n      }\n    }\n  } else {\n    return staticallyAnalyzeExports(modulePath, resolver)\n  }\n\n  return []\n}\n"],"file":"resolve-module-exports.js"}