{"version":3,"sources":["../../src/services/start-webpack-server.ts"],"names":["startWebpackServer","program","app","workerPool","Error","compiler","webpackActivity","websocketManager","hooks","invalid","tap","watchRun","tapAsync","_","done","end","report","activityTimer","id","start","isFirstCompile","Promise","resolve","stats","messages","toJson","urls","https","host","proxyPort","isSuccessful","errors","length","sitePackageJson","name","open","localUrlForBrowser","console","log","chalk","yellow","compilation","panicOnBuild"],"mappings":";;;;;;;AAAA;;AACA;;AACA;;AACA;;AAGA;;AAKA;;AACA;;AACA;;AACA;;AAGA;;AAIA;;AAEO,eAAeA,kBAAf,CAAkC;AACvCC,EAAAA,OADuC;AAEvCC,EAAAA,GAFuC;AAGvCC,EAAAA;AAHuC,CAAlC,EAOJ;AACD,MAAI,CAACF,OAAD,IAAY,CAACC,GAAjB,EAAsB;AACpB,UAAM,IAAIE,KAAJ,CAAW,yBAAX,CAAN;AACD;;AACD,MAAI;AAAEC,IAAAA,QAAF;AAAYC,IAAAA,eAAZ;AAA6BC,IAAAA;AAA7B,MAAkD,MAAM,8BAC1DN,OAD0D,EAE1DC,GAF0D,EAG1DC,UAH0D,CAA5D;AAMAE,EAAAA,QAAQ,CAACG,KAAT,CAAeC,OAAf,CAAuBC,GAAvB,CAA4B,eAA5B,EAA4C,YAAY;AACtD;AACD,GAFD;AAIAL,EAAAA,QAAQ,CAACG,KAAT,CAAeG,QAAf,CAAwBC,QAAxB,CAAkC,eAAlC,EAAkD,UAAUC,CAAV,EAAaC,IAAb,EAAmB;AACnE,QAAIR,eAAJ,EAAqB;AACnBA,MAAAA,eAAe,CAACS,GAAhB;AACD;;AACDT,IAAAA,eAAe,GAAGU,kBAAOC,aAAP,CAAsB,gCAAtB,EAAuD;AACvEC,MAAAA,EAAE,EAAG;AADkE,KAAvD,CAAlB;AAGAZ,IAAAA,eAAe,CAACa,KAAhB;AAEAL,IAAAA,IAAI;AACL,GAVD;AAYA,MAAIM,cAAc,GAAG,IAArB;AAEA,SAAO,IAAIC,OAAJ,CAAYC,OAAO,IAAI;AAC5BjB,IAAAA,QAAQ,CAACG,KAAT,CAAeM,IAAf,CAAoBF,QAApB,CAA8B,2BAA9B,EAA0D,gBACxDW,KADwD,EAExDT,IAFwD,EAGxD;AACA;AACA;AAEA;AACA;AACA;AACA,YAAMU,QAAQ,GAAG,oCAAsBD,KAAK,CAACE,MAAN,CAAa,EAAb,EAAiB,IAAjB,CAAtB,CAAjB;AACA,YAAMC,IAAI,GAAG,8BACXzB,OAAO,CAAC0B,KAAR,GAAiB,OAAjB,GAA2B,MADhB,EAEX1B,OAAO,CAAC2B,IAFG,EAGX3B,OAAO,CAAC4B,SAHG,CAAb;AAKA,YAAMC,YAAY,GAAG,CAACN,QAAQ,CAACO,MAAT,CAAgBC,MAAtC;;AAEA,UAAIF,YAAY,IAAIV,cAApB,EAAoC;AAClC,kDACEnB,OAAO,CAACgC,eAAR,CAAwBC,IAAxB,IAAiC,mBADnC,EAEER,IAFF;AAIA;;AACA,YAAIzB,OAAO,CAACkC,IAAZ,EAAkB;AAChB,cAAI;AACF,kBAAM,wBAAQT,IAAI,CAACU,kBAAb,CAAN;AACD,WAFD,CAEE,MAAM;AACNC,YAAAA,OAAO,CAACC,GAAR,CACG,GAAEC,eAAMC,MAAN,CACA,MADA,CAED,kDAHJ;AAKD;AACF;AACF;;AAEDpB,MAAAA,cAAc,GAAG,KAAjB;;AAEA,UAAId,eAAJ,EAAqB;AACnB,sDAAsBiB,KAAtB;;AAEA,YAAI,CAACO,YAAL,EAAmB;AACjB,gBAAMC,MAAM,GAAG,+CACZ,SADY,EAEbR,KAAK,CAACkB,WAAN,CAAkBV,MAFL,CAAf;AAIAzB,UAAAA,eAAe,CAACoC,YAAhB,CAA6BX,MAA7B;AACD;;AACDzB,QAAAA,eAAe,CAACS,GAAhB;AACAT,QAAAA,eAAe,GAAG,IAAlB;AACD;;AACD;AACA;AACAQ,MAAAA,IAAI;AACJQ,MAAAA,OAAO,CAAC;AAAEjB,QAAAA,QAAF;AAAYE,QAAAA;AAAZ,OAAD,CAAP;AACD,KAxDD;AAyDD,GA1DM,CAAP;AA2DD","sourcesContent":["import openurl from \"better-opn\"\nimport report from \"gatsby-cli/lib/reporter\"\nimport formatWebpackMessages from \"react-dev-utils/formatWebpackMessages\"\nimport chalk from \"chalk\"\nimport { Compiler } from \"webpack\"\n\nimport {\n  reportWebpackWarnings,\n  structureWebpackErrors,\n} from \"../utils/webpack-error-utils\"\n\nimport { printDeprecationWarnings } from \"../utils/print-deprecation-warnings\"\nimport { printInstructions } from \"../utils/print-instructions\"\nimport { prepareUrls } from \"../utils/prepare-urls\"\nimport { startServer } from \"../utils/start-server\"\nimport { WebsocketManager } from \"../utils/websocket-manager\"\nimport { IBuildContext } from \"./\"\nimport {\n  markWebpackStatusAsPending,\n  markWebpackStatusAsDone,\n} from \"../utils/webpack-status\"\nimport { enqueueFlush } from \"../utils/page-data\"\n\nexport async function startWebpackServer({\n  program,\n  app,\n  workerPool,\n}: Partial<IBuildContext>): Promise<{\n  compiler: Compiler\n  websocketManager: WebsocketManager\n}> {\n  if (!program || !app) {\n    throw new Error(`Missing required params`)\n  }\n  let { compiler, webpackActivity, websocketManager } = await startServer(\n    program,\n    app,\n    workerPool\n  )\n\n  compiler.hooks.invalid.tap(`log compiling`, function () {\n    markWebpackStatusAsPending()\n  })\n\n  compiler.hooks.watchRun.tapAsync(`log compiling`, function (_, done) {\n    if (webpackActivity) {\n      webpackActivity.end()\n    }\n    webpackActivity = report.activityTimer(`Re-building development bundle`, {\n      id: `webpack-develop`,\n    })\n    webpackActivity.start()\n\n    done()\n  })\n\n  let isFirstCompile = true\n\n  return new Promise(resolve => {\n    compiler.hooks.done.tapAsync(`print gatsby instructions`, async function (\n      stats,\n      done\n    ) {\n      // \"done\" event fires when Webpack has finished recompiling the bundle.\n      // Whether or not you have warnings or errors, you will get this event.\n\n      // We have switched off the default Webpack output in WebpackDevServer\n      // options so we are going to \"massage\" the warnings and errors and present\n      // them in a readable focused way.\n      const messages = formatWebpackMessages(stats.toJson({}, true))\n      const urls = prepareUrls(\n        program.https ? `https` : `http`,\n        program.host,\n        program.proxyPort\n      )\n      const isSuccessful = !messages.errors.length\n\n      if (isSuccessful && isFirstCompile) {\n        printInstructions(\n          program.sitePackageJson.name || `(Unnamed package)`,\n          urls\n        )\n        printDeprecationWarnings()\n        if (program.open) {\n          try {\n            await openurl(urls.localUrlForBrowser)\n          } catch {\n            console.log(\n              `${chalk.yellow(\n                `warn`\n              )} Browser not opened because no browser was found`\n            )\n          }\n        }\n      }\n\n      isFirstCompile = false\n\n      if (webpackActivity) {\n        reportWebpackWarnings(stats)\n\n        if (!isSuccessful) {\n          const errors = structureWebpackErrors(\n            `develop`,\n            stats.compilation.errors\n          )\n          webpackActivity.panicOnBuild(errors)\n        }\n        webpackActivity.end()\n        webpackActivity = null\n      }\n      enqueueFlush()\n      markWebpackStatusAsDone()\n      done()\n      resolve({ compiler, websocketManager })\n    })\n  })\n}\n"],"file":"start-webpack-server.js"}