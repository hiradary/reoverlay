{"version":3,"sources":["../../src/redux/index.ts"],"names":["emitter","readState","state","nodes","nodesByType","Map","forEach","node","type","internal","has","set","get","id","e","multi","dispatch","next","action","Array","isArray","filter","Boolean","map","configureStore","initialState","reducers","thunk","store","saveState","getState","status","componentDataDependencies","components","jobsV2","staticQueryComponents","webpackCompilationHash","pageDataStats","pageData","pendingPageDataWrites","subscribe","lastAction","emit"],"mappings":";;;;;;;;;AAAA;;AAQA;;AACA;;AACA;;AACA;;AAGA;AACO,MAAMA,OAAO,GAAG,iBAAhB,C,CAEP;;;;AACO,MAAMC,SAAS,GAAG,MAAoB;AAC3C,MAAI;AACF,UAAMC,KAAK,GAAG,6BAAd;;AACA,QAAIA,KAAK,CAACC,KAAV,EAAiB;AACf;AACAD,MAAAA,KAAK,CAACE,WAAN,GAAoB,IAAIC,GAAJ,EAApB;AACAH,MAAAA,KAAK,CAACC,KAAN,CAAYG,OAAZ,CAAoBC,IAAI,IAAI;AAC1B,cAAM;AAAEC,UAAAA;AAAF,YAAWD,IAAI,CAACE,QAAtB;;AACA,YAAI,CAACP,KAAK,CAACE,WAAN,CAAkBM,GAAlB,CAAsBF,IAAtB,CAAL,EAAkC;AAChCN,UAAAA,KAAK,CAACE,WAAN,CAAkBO,GAAlB,CAAsBH,IAAtB,EAA4B,IAAIH,GAAJ,EAA5B;AACD,SAJyB,CAK1B;AACA;;;AACAH,QAAAA,KAAK,CAACE,WAAN,CAAkBQ,GAAlB,CAAsBJ,IAAtB,EAA6BG,GAA7B,CAAiCJ,IAAI,CAACM,EAAtC,EAA0CN,IAA1C;AACD,OARD;AASD,KAdC,CAgBF;AACA;AACA;;;AACA,WAAOL,KAAK,CAAE,eAAF,CAAZ;AACA,WAAOA,KAAP;AACD,GArBD,CAqBE,OAAOY,CAAP,EAAU,CAEX,CAFC,CACA;AAEF;AACA;;;AACA,SAAO,EAAP;AACD,CA5BM;;;;AAkCP;;;AAGA,MAAMC,KAAiC,GAAG,CAAC;AAAEC,EAAAA;AAAF,CAAD,KAAkBC,IAAI,IAC9DC,MADkE,IAGlEC,KAAK,CAACC,OAAN,CAAcF,MAAd,IAAwBA,MAAM,CAACG,MAAP,CAAcC,OAAd,EAAuBC,GAAvB,CAA2BP,QAA3B,CAAxB,GAA+DC,IAAI,CAACC,MAAD,CAHrE,C,CAKA;AACA;AACA;;;AACO,MAAMM,cAAc,GAAIC,YAAD,IAC5B,wBACE,4BAA8B,EAAE,GAAGC;AAAL,CAA9B,CADF,EAEED,YAFF,EAGE,4BAAgBE,mBAAhB,EAAsEZ,KAAtE,CAHF,CADK;;;AAQA,MAAMa,KAAuB,GAAGJ,cAAc,CAACvB,SAAS,EAAV,CAA9C,C,CAEP;;;;AACO,MAAM4B,SAAS,GAAG,MAAY;AACnC,QAAM3B,KAAK,GAAG0B,KAAK,CAACE,QAAN,EAAd;AAEA,SAAO,2BAAa;AAClB3B,IAAAA,KAAK,EAAED,KAAK,CAACC,KADK;AAElB4B,IAAAA,MAAM,EAAE7B,KAAK,CAAC6B,MAFI;AAGlBC,IAAAA,yBAAyB,EAAE9B,KAAK,CAAC8B,yBAHf;AAIlBC,IAAAA,UAAU,EAAE/B,KAAK,CAAC+B,UAJA;AAKlBC,IAAAA,MAAM,EAAEhC,KAAK,CAACgC,MALI;AAMlBC,IAAAA,qBAAqB,EAAEjC,KAAK,CAACiC,qBANX;AAOlBC,IAAAA,sBAAsB,EAAElC,KAAK,CAACkC,sBAPZ;AAQlBC,IAAAA,aAAa,EAAEnC,KAAK,CAACmC,aARH;AASlBC,IAAAA,QAAQ,EAAEpC,KAAK,CAACoC,QATE;AAUlBC,IAAAA,qBAAqB,EAAErC,KAAK,CAACqC;AAVX,GAAb,CAAP;AAYD,CAfM;;;AAiBPX,KAAK,CAACY,SAAN,CAAgB,MAAM;AACpB,QAAMC,UAAU,GAAGb,KAAK,CAACE,QAAN,GAAiBW,UAApC;AACAzC,EAAAA,OAAO,CAAC0C,IAAR,CAAaD,UAAU,CAACjC,IAAxB,EAA8BiC,UAA9B;AACD,CAHD","sourcesContent":["import {\n  applyMiddleware,\n  combineReducers,\n  createStore,\n  Middleware,\n} from \"redux\"\nimport _ from \"lodash\"\n\nimport { mett } from \"../utils/mett\"\nimport thunk, { ThunkMiddleware } from \"redux-thunk\"\nimport * as reducers from \"./reducers\"\nimport { writeToCache, readFromCache } from \"./persist\"\nimport { IGatsbyState, ActionsUnion } from \"./types\"\n\n// Create event emitter for actions\nexport const emitter = mett()\n\n// Read old node data from cache.\nexport const readState = (): IGatsbyState => {\n  try {\n    const state = readFromCache() as IGatsbyState\n    if (state.nodes) {\n      // re-create nodesByType\n      state.nodesByType = new Map()\n      state.nodes.forEach(node => {\n        const { type } = node.internal\n        if (!state.nodesByType.has(type)) {\n          state.nodesByType.set(type, new Map())\n        }\n        // The `.has` and `.set` calls above make this safe\n        // eslint-disable-next-line @typescript-eslint/no-non-null-assertion\n        state.nodesByType.get(type)!.set(node.id, node)\n      })\n    }\n\n    // jsonDataPaths was removed in the per-page-manifest\n    // changes. Explicitly delete it here to cover case where user\n    // runs gatsby the first time after upgrading.\n    delete state[`jsonDataPaths`]\n    return state\n  } catch (e) {\n    // ignore errors.\n  }\n  // BUG: Would this not cause downstream bugs? seems likely. Why wouldn't we just\n  // throw and kill the program?\n  return {} as IGatsbyState\n}\n\nexport interface IMultiDispatch {\n  <T extends ActionsUnion>(action: T[]): T[]\n}\n\n/**\n * Redux middleware handling array of actions\n */\nconst multi: Middleware<IMultiDispatch> = ({ dispatch }) => next => (\n  action: ActionsUnion\n): ActionsUnion | ActionsUnion[] =>\n  Array.isArray(action) ? action.filter(Boolean).map(dispatch) : next(action)\n\n// We're using the inferred type here becauise manually typing it would be very complicated\n// and error-prone. Instead we'll make use of the createStore return value, and export that type.\n// eslint-disable-next-line @typescript-eslint/explicit-function-return-type\nexport const configureStore = (initialState: IGatsbyState) =>\n  createStore(\n    combineReducers<IGatsbyState>({ ...reducers }),\n    initialState,\n    applyMiddleware(thunk as ThunkMiddleware<IGatsbyState, ActionsUnion>, multi)\n  )\n\nexport type GatsbyReduxStore = ReturnType<typeof configureStore>\nexport const store: GatsbyReduxStore = configureStore(readState())\n\n// Persist state.\nexport const saveState = (): void => {\n  const state = store.getState()\n\n  return writeToCache({\n    nodes: state.nodes,\n    status: state.status,\n    componentDataDependencies: state.componentDataDependencies,\n    components: state.components,\n    jobsV2: state.jobsV2,\n    staticQueryComponents: state.staticQueryComponents,\n    webpackCompilationHash: state.webpackCompilationHash,\n    pageDataStats: state.pageDataStats,\n    pageData: state.pageData,\n    pendingPageDataWrites: state.pendingPageDataWrites,\n  })\n}\n\nstore.subscribe(() => {\n  const lastAction = store.getState().lastAction\n  emitter.emit(lastAction.type, lastAction)\n})\n"],"file":"index.js"}