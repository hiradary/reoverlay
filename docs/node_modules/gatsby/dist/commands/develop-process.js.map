{"version":3,"sources":["../../src/commands/develop-process.ts"],"names":["setTimeout","process","send","setInterval","type","telemetry","trackCli","on","msg","action","exit","payload","module","exports","program","env","GATSBY_EXPERIMENTAL_PAGE_BUILD_ON_DATA_CHANGES","report","panic","chalk","yellow","cyan","openTracingConfigFile","pendingActivity","id","startBackgroundUpdate","port","parseInt","e","message","gatsbyNodeGraphQLFunction","workerPool","queryIds","store","boundActionCreators","setProgramStatus","ProgramStatus","BOOTSTRAP_QUERY_RUNNING_FINISHED","db","saveState","requiresWriter","startListener","startAutosave","queryUtil","startListeningToDevelopQueue","graphqlTracing","queryWatcher","startWatchDeletePage","app"],"mappings":"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","sourcesContent":["import { bootstrap } from \"../bootstrap\"\nimport { store } from \"../redux\"\nimport { syncStaticDir } from \"../utils/get-static-dir\"\nimport report from \"gatsby-cli/lib/reporter\"\nimport chalk from \"chalk\"\nimport telemetry from \"gatsby-telemetry\"\nimport express from \"express\"\nimport { bootstrapSchemaHotReloader } from \"../bootstrap/schema-hot-reloader\"\nimport bootstrapPageHotReloader from \"../bootstrap/page-hot-reloader\"\nimport { initTracer } from \"../utils/tracer\"\nimport db from \"../db\"\nimport { detectPortInUseAndPrompt } from \"../utils/detect-port-in-use-and-prompt\"\nimport onExit from \"signal-exit\"\nimport queryUtil from \"../query\"\nimport queryWatcher from \"../query/query-watcher\"\nimport * as requiresWriter from \"../bootstrap/requires-writer\"\nimport { waitUntilAllJobsComplete } from \"../utils/wait-until-jobs-complete\"\nimport {\n  userPassesFeedbackRequestHeuristic,\n  showFeedbackRequest,\n} from \"../utils/feedback\"\n\nimport { markWebpackStatusAsPending } from \"../utils/webpack-status\"\n\nimport { IProgram } from \"./types\"\nimport {\n  calculateDirtyQueries,\n  runStaticQueries,\n  runPageQueries,\n  startWebpackServer,\n  writeOutRequires,\n} from \"../services\"\nimport { boundActionCreators } from \"../redux/actions\"\nimport { ProgramStatus } from \"../redux/types\"\n\n// const isInteractive = process.stdout.isTTY\n\n// Watch the static directory and copy files to public as they're added or\n// changed. Wait 10 seconds so copying doesn't interfere with the regular\n// bootstrap.\nsetTimeout(() => {\n  syncStaticDir()\n}, 10000)\n\n// Time for another story...\n// When the parent process is killed by SIGKILL, Node doesm't kill spawned child processes\n// Hence, we peiodically send a heart beat to the parent to check if it is still alive\n// This will crash with Error [ERR_IPC_CHANNEL_CLOSED]: Channel closed\n// and kill the orphaned child process as a result\nif (process.send) {\n  setInterval(() => {\n    // eslint-disable-next-line @typescript-eslint/no-non-null-assertion\n    process.send!({\n      type: `HEARTBEAT`,\n    })\n  }, 1000)\n}\n\nonExit(() => {\n  telemetry.trackCli(`DEVELOP_STOP`)\n})\n\nprocess.on(`message`, msg => {\n  if (msg.type === `COMMAND` && msg.action.type === `EXIT`) {\n    process.exit(msg.action.payload)\n  }\n})\n\nmodule.exports = async (program: IProgram): Promise<void> => {\n  // We want to prompt the feedback request when users quit develop\n  // assuming they pass the heuristic check to know they are a user\n  // we want to request feedback from, and we're not annoying them.\n  process.on(\n    `SIGINT`,\n    async (): Promise<void> => {\n      if (await userPassesFeedbackRequestHeuristic()) {\n        showFeedbackRequest()\n      }\n      process.exit(0)\n    }\n  )\n\n  if (process.env.GATSBY_EXPERIMENTAL_PAGE_BUILD_ON_DATA_CHANGES) {\n    report.panic(\n      `The flag ${chalk.yellow(\n        `GATSBY_EXPERIMENTAL_PAGE_BUILD_ON_DATA_CHANGES`\n      )} is not available with ${chalk.cyan(\n        `gatsby develop`\n      )}, please retry using ${chalk.cyan(`gatsby build`)}`\n    )\n  }\n  initTracer(program.openTracingConfigFile)\n  markWebpackStatusAsPending()\n  report.pendingActivity({ id: `webpack-develop` })\n  telemetry.trackCli(`DEVELOP_START`)\n  telemetry.startBackgroundUpdate()\n\n  const port =\n    typeof program.port === `string` ? parseInt(program.port, 10) : program.port\n\n  try {\n    program.port = await detectPortInUseAndPrompt(port)\n  } catch (e) {\n    if (e.message === `USER_REJECTED`) {\n      process.exit(0)\n    }\n\n    throw e\n  }\n\n  // Start bootstrap process.\n  const { gatsbyNodeGraphQLFunction, workerPool } = await bootstrap({ program })\n\n  // Start the createPages hot reloader.\n  bootstrapPageHotReloader(gatsbyNodeGraphQLFunction)\n\n  // Start the schema hot reloader.\n  bootstrapSchemaHotReloader()\n\n  const { queryIds } = await calculateDirtyQueries({ store })\n\n  await runStaticQueries({ queryIds, store, program })\n  await runPageQueries({ queryIds, store, program })\n  await writeOutRequires({ store })\n  boundActionCreators.setProgramStatus(\n    ProgramStatus.BOOTSTRAP_QUERY_RUNNING_FINISHED\n  )\n\n  await db.saveState()\n\n  await waitUntilAllJobsComplete()\n  requiresWriter.startListener()\n  db.startAutosave()\n  queryUtil.startListeningToDevelopQueue({\n    graphqlTracing: program.graphqlTracing,\n  })\n  queryWatcher.startWatchDeletePage()\n  const app = express()\n\n  await startWebpackServer({ program, app, workerPool })\n}\n"],"file":"develop-process.js"}