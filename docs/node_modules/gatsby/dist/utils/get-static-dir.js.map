{"version":3,"sources":["../../src/utils/get-static-dir.ts"],"names":["copyStaticDirs","themes","flattenedPlugins","store","getState","themesSet","map","plugin","themeDir","pluginFilepath","themeName","name","theme","nodePath","resolve","filter","themeStaticPath","fs","existsSync","folder","copySync","join","process","cwd","staticDir","undefined","dereference","syncStaticDir","chokidar","watch","on","path","relativePath","relative","copy"],"mappings":";;;;;;;AAAA;;AACA;;AACA;;AACA;;AAEA;;;;;AAKO,MAAMA,cAAc,GAAG,MAAY;AACxC;AACA,QAAM;AAAEC,IAAAA,MAAF;AAAUC,IAAAA;AAAV,MAA+BC,aAAMC,QAAN,EAArC,CAFwC,CAGxC;;;AACA,QAAMC,SAAS,GAAGJ,MAAM,CAACA,MAAP,GACdA,MAAM,CAACA,MADO,GAEdC,gBAAgB,CAACI,GAAjB,CAAqBC,MAAM,IAAI;AAC7B,WAAO;AACLC,MAAAA,QAAQ,EAAED,MAAM,CAACE,cADZ;AAELC,MAAAA,SAAS,EAAEH,MAAM,CAACI;AAFb,KAAP;AAID,GALD,CAFJ;AASAN,EAAAA,SAAS,CACP;AADO,GAENC,GAFH,CAEOM,KAAK,IAAIC,cAASC,OAAT,CAAiBF,KAAK,CAACJ,QAAvB,EAAkC,QAAlC,CAFhB,EAGE;AAHF,GAIGO,MAJH,CAIUC,eAAe,IAAIC,iBAAGC,UAAH,CAAcF,eAAd,CAJ7B,EAKE;AALF,GAMGV,GANH,CAMOa,MAAM,IAAIF,iBAAGG,QAAH,CAAYD,MAAZ,EAAoBN,cAASQ,IAAT,CAAcC,OAAO,CAACC,GAAR,EAAd,EAA8B,QAA9B,CAApB,CANjB;;AAQA,QAAMC,SAAS,GAAGX,cAASQ,IAAT,CAAcC,OAAO,CAACC,GAAR,EAAd,EAA8B,QAA9B,CAAlB;;AACA,MAAI,CAACN,iBAAGC,UAAH,CAAcM,SAAd,CAAL,EAA+B,OAAOC,SAAP;AAC/B,SAAOR,iBAAGG,QAAH,CAAYI,SAAZ,EAAuBX,cAASQ,IAAT,CAAcC,OAAO,CAACC,GAAR,EAAd,EAA8B,QAA9B,CAAvB,EAA+D;AACpEG,IAAAA,WAAW,EAAE;AADuD,GAA/D,CAAP;AAGD,CA1BM;AA4BP;;;;;;;;;AAKO,MAAMC,aAAa,GAAG,MAAY;AACvC,QAAMH,SAAS,GAAGX,cAASQ,IAAT,CAAcC,OAAO,CAACC,GAAR,EAAd,EAA8B,QAA9B,CAAlB;;AACAK,oBACGC,KADH,CACSL,SADT,EAEGM,EAFH,CAEO,KAFP,EAEaC,IAAI,IAAI;AACjB,UAAMC,YAAY,GAAGnB,cAASoB,QAAT,CAAkBT,SAAlB,EAA6BO,IAA7B,CAArB;;AACAd,qBAAGiB,IAAH,CAAQH,IAAR,EAAe,GAAET,OAAO,CAACC,GAAR,EAAc,WAAUS,YAAa,EAAtD;AACD,GALH,EAMGF,EANH,CAMO,QANP,EAMgBC,IAAI,IAAI;AACpB,UAAMC,YAAY,GAAGnB,cAASoB,QAAT,CAAkBT,SAAlB,EAA6BO,IAA7B,CAArB;;AACAd,qBAAGiB,IAAH,CAAQH,IAAR,EAAe,GAAET,OAAO,CAACC,GAAR,EAAc,WAAUS,YAAa,EAAtD;AACD,GATH;AAUD,CAZM","sourcesContent":["import fs from \"fs-extra\"\nimport chokidar from \"chokidar\"\nimport nodePath from \"path\"\nimport { store } from \"../redux\"\n\n/**\n * copyStaticDirs\n * --\n * Copy files from the static directory to the public directory\n */\nexport const copyStaticDirs = (): void => {\n  // access the store to get themes\n  const { themes, flattenedPlugins } = store.getState()\n  // if there are legacy themes, only use them. Otherwise proceed with plugins\n  const themesSet = themes.themes\n    ? themes.themes\n    : flattenedPlugins.map(plugin => {\n        return {\n          themeDir: plugin.pluginFilepath,\n          themeName: plugin.name,\n        }\n      })\n\n  themesSet\n    // create an array of potential theme static folders\n    .map(theme => nodePath.resolve(theme.themeDir, `static`))\n    // filter out the static folders that don't exist\n    .filter(themeStaticPath => fs.existsSync(themeStaticPath))\n    // copy the files for each folder into the user's build\n    .map(folder => fs.copySync(folder, nodePath.join(process.cwd(), `public`)))\n\n  const staticDir = nodePath.join(process.cwd(), `static`)\n  if (!fs.existsSync(staticDir)) return undefined\n  return fs.copySync(staticDir, nodePath.join(process.cwd(), `public`), {\n    dereference: true,\n  })\n}\n\n/**\n * syncStaticDir\n * --\n * Set up a watcher to sync changes from the static directory to the public directory\n */\nexport const syncStaticDir = (): void => {\n  const staticDir = nodePath.join(process.cwd(), `static`)\n  chokidar\n    .watch(staticDir)\n    .on(`add`, path => {\n      const relativePath = nodePath.relative(staticDir, path)\n      fs.copy(path, `${process.cwd()}/public/${relativePath}`)\n    })\n    .on(`change`, path => {\n      const relativePath = nodePath.relative(staticDir, path)\n      fs.copy(path, `${process.cwd()}/public/${relativePath}`)\n    })\n}\n"],"file":"get-static-dir.js"}