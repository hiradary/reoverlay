{"version":3,"sources":["../../src/utils/create-schema-customization.ts"],"names":["createSchemaCustomization","refresh","parentSpan","store","dispatch","type","traceId"],"mappings":";;;;;;;AAAA;;AACA;;AAGO,MAAMA,yBAAyB,GAAG,OAAO;AAC9CC,EAAAA,OAAO,GAAG,KADoC;AAE9CC,EAAAA;AAF8C,CAAP,KAMpB;AACnB,MAAID,OAAJ,EAAa;AACXE,iBAAMC,QAAN,CAAe;AAAEC,MAAAA,IAAI,EAAG;AAAT,KAAf;AACD;;AACD,QAAM,4BAAe,2BAAf,EAA2C;AAC/CH,IAAAA,UAD+C;AAE/CI,IAAAA,OAAO,EAAE,CAACL,OAAD,GACJ,mCADI,GAEJ;AAJ0C,GAA3C,CAAN;AAMD,CAhBM","sourcesContent":["import apiRunnerNode from \"./api-runner-node\"\nimport { store } from \"../redux\"\nimport { Span } from \"opentracing\"\n\nexport const createSchemaCustomization = async ({\n  refresh = false,\n  parentSpan,\n}: {\n  refresh?: boolean\n  parentSpan?: Span\n}): Promise<void> => {\n  if (refresh) {\n    store.dispatch({ type: `CLEAR_SCHEMA_CUSTOMIZATION` })\n  }\n  await apiRunnerNode(`createSchemaCustomization`, {\n    parentSpan,\n    traceId: !refresh\n      ? `initial-createSchemaCustomization`\n      : `refresh-createSchemaCustomization`,\n  })\n}\n"],"file":"create-schema-customization.js"}