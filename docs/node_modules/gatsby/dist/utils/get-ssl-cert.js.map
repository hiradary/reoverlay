{"version":3,"sources":["../../src/utils/get-ssl-cert.js"],"names":["report","require","fs","path","os","prompts","absoluteOrDirectory","directory","filePath","isAbsolute","join","getWindowsEncryptionPassword","info","results","type","name","message","validate","input","length","value","module","exports","certFile","keyFile","caFile","panic","id","context","keyPath","certPath","process","env","NODE_EXTRA_CA_CERTS","key","readFileSync","cert","includes","platform","HOME","mkdtemp","mkdtempSync","tmpdir","getDevCert","certificateFor","caPath","getCaPath","skipCertutilInstall","ui","err","error"],"mappings":";;AAAA,MAAMA,MAAM,GAAGC,OAAO,CAAE,yBAAF,CAAtB;;AACA,MAAMC,EAAE,GAAGD,OAAO,CAAE,IAAF,CAAlB;;AACA,MAAME,IAAI,GAAGF,OAAO,CAAE,MAAF,CAApB;;AACA,MAAMG,EAAE,GAAGH,OAAO,CAAE,IAAF,CAAlB;;AACA,MAAMI,OAAO,GAAGJ,OAAO,CAAE,SAAF,CAAvB;;AAEA,MAAMK,mBAAmB,GAAG,CAACC,SAAD,EAAYC,QAAZ,KAAyB;AACnD;AACA,MAAIL,IAAI,CAACM,UAAL,CAAgBD,QAAhB,CAAJ,EAA+B;AAC7B,WAAOA,QAAP;AACD;;AACD,SAAOL,IAAI,CAACO,IAAL,CAAUH,SAAV,EAAqBC,QAArB,CAAP;AACD,CAND;;AAQA,MAAMG,4BAA4B,GAAG,YAAY;AAC/CX,EAAAA,MAAM,CAACY,IAAP,CACE,CACG,uEADH,EAEG,gCAFH,EAGG,EAHH,EAIG,0EAJH,EAKG,0EALH,EAMG,4BANH,EAOG,EAPH,EAQEF,IARF,CAQQ,IARR,CADF;AAWA,QAAMG,OAAO,GAAG,MAAMR,OAAO,CAAC;AAC5BS,IAAAA,IAAI,EAAG,UADqB;AAE5BC,IAAAA,IAAI,EAAG,OAFqB;AAG5BC,IAAAA,OAAO,EAAG,8BAHkB;AAI5BC,IAAAA,QAAQ,EAAEC,KAAK,IAAIA,KAAK,CAACC,MAAN,GAAe,CAAf,IAAqB;AAJZ,GAAD,CAA7B;AAMA,SAAON,OAAO,CAACO,KAAf;AACD,CAnBD;;AAqBAC,MAAM,CAACC,OAAP,GAAiB,OAAO;AAAEP,EAAAA,IAAF;AAAQQ,EAAAA,QAAR;AAAkBC,EAAAA,OAAlB;AAA2BC,EAAAA,MAA3B;AAAmClB,EAAAA;AAAnC,CAAP,KAA0D;AACzE;AACA;AACA,MAAIgB,QAAQ,GAAG,CAACC,OAAJ,GAAcA,OAA1B,EAAmC;AACjCxB,IAAAA,MAAM,CAAC0B,KAAP,CAAa;AACXC,MAAAA,EAAE,EAAG,OADM;AAEXC,MAAAA,OAAO,EAAE;AAFE,KAAb;AAID;;AAED,MAAIL,QAAQ,IAAIC,OAAhB,EAAyB;AACvB,UAAMK,OAAO,GAAGvB,mBAAmB,CAACC,SAAD,EAAYiB,OAAZ,CAAnC;AACA,UAAMM,QAAQ,GAAGxB,mBAAmB,CAACC,SAAD,EAAYgB,QAAZ,CAApC;AAEAQ,IAAAA,OAAO,CAACC,GAAR,CAAYC,mBAAZ,GAAkCR,MAAM,GACpCnB,mBAAmB,CAACC,SAAD,EAAYkB,MAAZ,CADiB,GAEpCK,QAFJ;AAGA,WAAO,MAAM;AACXI,MAAAA,GAAG,EAAEhC,EAAE,CAACiC,YAAH,CAAgBN,OAAhB,CADM;AAEXO,MAAAA,IAAI,EAAElC,EAAE,CAACiC,YAAH,CAAgBL,QAAhB;AAFK,KAAb;AAID;;AAED9B,EAAAA,MAAM,CAACY,IAAP,CACG,gFADH;;AAGA,MAAI;AACF,QAAI,CAAE,OAAF,EAAW,QAAX,EAAoByB,QAApB,CAA6BjC,EAAE,CAACkC,QAAH,EAA7B,KAA+C,CAACP,OAAO,CAACC,GAAR,CAAYO,IAAhE,EAAsE;AACpE;AACA;AACA;AACA;AACA;AACA;AACA;AACA,YAAMC,OAAO,GAAGtC,EAAE,CAACuC,WAAH,CAAetC,IAAI,CAACO,IAAL,CAAUN,EAAE,CAACsC,MAAH,EAAV,EAAwB,OAAxB,CAAf,CAAhB;AACAX,MAAAA,OAAO,CAACC,GAAR,CAAYO,IAAZ,GAAmBC,OAAnB;AACD;;AACD,UAAMG,UAAU,GAAG1C,OAAO,CAAE,SAAF,CAAP,CAAmB2C,cAAtC;;AACA,UAAM;AAAEC,MAAAA,MAAF;AAAUX,MAAAA,GAAV;AAAeE,MAAAA;AAAf,QAAwB,MAAMO,UAAU,CAAC5B,IAAD,EAAO;AACnD+B,MAAAA,SAAS,EAAE,IADwC;AAEnDC,MAAAA,mBAAmB,EAAE,KAF8B;AAGnDC,MAAAA,EAAE,EAAE;AACFrC,QAAAA;AADE;AAH+C,KAAP,CAA9C;;AAOA,QAAIkC,MAAJ,EAAY;AACVd,MAAAA,OAAO,CAACC,GAAR,CAAYC,mBAAZ,GAAkCY,MAAlC;AACD;;AACD,WAAO;AACLX,MAAAA,GADK;AAELE,MAAAA;AAFK,KAAP;AAID,GA3BD,CA2BE,OAAOa,GAAP,EAAY;AACZjD,IAAAA,MAAM,CAAC0B,KAAP,CAAa;AACXC,MAAAA,EAAE,EAAG,OADM;AAEXuB,MAAAA,KAAK,EAAED,GAFI;AAGXrB,MAAAA,OAAO,EAAE;AACPZ,QAAAA,OAAO,EAAEiC,GAAG,CAACjC;AADN;AAHE,KAAb;AAOD;;AAED,SAAO,KAAP;AACD,CAhED","sourcesContent":["const report = require(`gatsby-cli/lib/reporter`)\nconst fs = require(`fs`)\nconst path = require(`path`)\nconst os = require(`os`)\nconst prompts = require(`prompts`)\n\nconst absoluteOrDirectory = (directory, filePath) => {\n  // Support absolute paths\n  if (path.isAbsolute(filePath)) {\n    return filePath\n  }\n  return path.join(directory, filePath)\n}\n\nconst getWindowsEncryptionPassword = async () => {\n  report.info(\n    [\n      `A password is required to access the secure certificate authority key`,\n      `used for signing certificates.`,\n      ``,\n      `If this is the first time this has run, then this is to set the password`,\n      `for future use.  If any new certificates are signed later, you will need`,\n      `to use this same password.`,\n      ``,\n    ].join(`\\n`)\n  )\n  const results = await prompts({\n    type: `password`,\n    name: `value`,\n    message: `Please enter the CA password`,\n    validate: input => input.length > 0 || `You must enter a password.`,\n  })\n  return results.value\n}\n\nmodule.exports = async ({ name, certFile, keyFile, caFile, directory }) => {\n  // check that cert file and key file are both true or both false, if they are both\n  // false, it defaults to the automatic ssl\n  if (certFile ? !keyFile : keyFile) {\n    report.panic({\n      id: `11521`,\n      context: {},\n    })\n  }\n\n  if (certFile && keyFile) {\n    const keyPath = absoluteOrDirectory(directory, keyFile)\n    const certPath = absoluteOrDirectory(directory, certFile)\n\n    process.env.NODE_EXTRA_CA_CERTS = caFile\n      ? absoluteOrDirectory(directory, caFile)\n      : certPath\n    return await {\n      key: fs.readFileSync(keyPath),\n      cert: fs.readFileSync(certPath),\n    }\n  }\n\n  report.info(\n    `setting up automatic SSL certificate (may require elevated permissions/sudo)\\n`\n  )\n  try {\n    if ([`linux`, `darwin`].includes(os.platform()) && !process.env.HOME) {\n      // this is a total hack to ensure process.env.HOME is set on linux and mac\n      // devcert creates config path at import time (hence we import devcert after setting dummy value):\n      // - https://github.com/davewasmer/devcert/blob/2b1b8d40eda251616bf74fd69f00ae8222ca1171/src/constants.ts#L15\n      // - https://github.com/LinusU/node-application-config-path/blob/ae49ff6748b68b29ec76c00ce4a28ba8e9161d9b/index.js#L13\n      // if HOME is not set, we will get:\n      // \"The \"path\" argument must be of type s tring. Received type undefined\"\n      // fatal error. This still likely will result in fatal error, but at least it's not on import time\n      const mkdtemp = fs.mkdtempSync(path.join(os.tmpdir(), `home-`))\n      process.env.HOME = mkdtemp\n    }\n    const getDevCert = require(`devcert`).certificateFor\n    const { caPath, key, cert } = await getDevCert(name, {\n      getCaPath: true,\n      skipCertutilInstall: false,\n      ui: {\n        getWindowsEncryptionPassword,\n      },\n    })\n    if (caPath) {\n      process.env.NODE_EXTRA_CA_CERTS = caPath\n    }\n    return {\n      key,\n      cert,\n    }\n  } catch (err) {\n    report.panic({\n      id: `11522`,\n      error: err,\n      context: {\n        message: err.message,\n      },\n    })\n  }\n\n  return false\n}\n"],"file":"get-ssl-cert.js"}