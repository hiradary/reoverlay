{"version":3,"sources":["../../../src/schema/types/node-interface.js"],"names":["SORTABLE_ENUM","require","SEARCHABLE_ENUM","NodeInterfaceFields","getOrCreateNodeInterface","schemaComposer","internalTC","getOrCreateOTC","tc","addFields","content","contentDigest","description","fieldOwners","ignoreType","mediaType","owner","type","getInputTypeComposer","nodeInterfaceTC","getOrCreateIFTC","setDescription","id","parent","resolve","source","args","context","info","path","nodeModel","getNodeById","extensions","searchable","SEARCHABLE","sortable","SORTABLE","needsResolve","children","getNodesByIds","ids","internal","getTypeNonNull","nodeInputTC","extendField","addNodeInterface","typeComposer","addInterface","addNodeInterfaceFields","getFields","setResolveType","node","addSchemaMustHaveType","getNodeInterface","module","exports"],"mappings":"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","sourcesContent":["const { SORTABLE_ENUM } = require(`./sort`)\nconst { SEARCHABLE_ENUM } = require(`./filter`)\n\nconst NodeInterfaceFields = [`id`, `parent`, `children`, `internal`]\n\nconst getOrCreateNodeInterface = schemaComposer => {\n  // TODO: why is `mediaType` on Internal? Applies only to File!?\n  // `fieldOwners` is an object\n  // Should we drop ignoreType?\n  const internalTC = schemaComposer.getOrCreateOTC(`Internal`, tc => {\n    tc.addFields({\n      content: `String`,\n      contentDigest: `String!`,\n      description: `String`,\n      fieldOwners: [`String`],\n      ignoreType: `Boolean`,\n      mediaType: `String`,\n      owner: `String!`,\n      type: `String!`,\n    })\n    // TODO: Can be removed with graphql-compose 5.11\n    tc.getInputTypeComposer()\n  })\n\n  const nodeInterfaceTC = schemaComposer.getOrCreateIFTC(`Node`, tc => {\n    tc.setDescription(`Node Interface`)\n    tc.addFields({\n      id: `ID!`,\n      parent: {\n        type: `Node`,\n        resolve: (source, args, context, info) => {\n          const { path } = context\n          return context.nodeModel.getNodeById({ id: source.parent }, { path })\n        },\n        extensions: {\n          searchable: SEARCHABLE_ENUM.SEARCHABLE,\n          sortable: SORTABLE_ENUM.SORTABLE,\n          needsResolve: true,\n        },\n      },\n      children: {\n        type: `[Node!]!`,\n        resolve: (source, args, context, info) => {\n          const { path } = context\n          return context.nodeModel.getNodesByIds(\n            { ids: source.children },\n            { path }\n          )\n        },\n        extensions: {\n          searchable: SEARCHABLE_ENUM.SEARCHABLE,\n          sortable: SORTABLE_ENUM.SORTABLE,\n          needsResolve: true,\n        },\n      },\n      internal: internalTC.getTypeNonNull(),\n    })\n    // TODO: In Gatsby v2, the NodeInput.id field is of type String, not ID.\n    // Remove this workaround for v3.\n    const nodeInputTC = tc.getInputTypeComposer()\n    nodeInputTC.extendField(`id`, { type: `String` })\n  })\n\n  return nodeInterfaceTC\n}\n\nconst addNodeInterface = ({ schemaComposer, typeComposer }) => {\n  const nodeInterfaceTC = getOrCreateNodeInterface(schemaComposer)\n  typeComposer.addInterface(nodeInterfaceTC)\n  addNodeInterfaceFields({ schemaComposer, typeComposer })\n}\n\nconst addNodeInterfaceFields = ({ schemaComposer, typeComposer }) => {\n  const nodeInterfaceTC = getOrCreateNodeInterface(schemaComposer)\n  typeComposer.addFields(nodeInterfaceTC.getFields())\n  nodeInterfaceTC.setResolveType(node => node.internal.type)\n  schemaComposer.addSchemaMustHaveType(typeComposer)\n}\n\nconst getNodeInterface = ({ schemaComposer }) =>\n  getOrCreateNodeInterface(schemaComposer)\n\nmodule.exports = {\n  addNodeInterface,\n  addNodeInterfaceFields,\n  getNodeInterface,\n  NodeInterfaceFields,\n}\n"],"file":"node-interface.js"}