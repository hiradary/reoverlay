{"version":3,"sources":["../../../src/schema/infer/is-file.js"],"names":["path","require","slash","mime","isRelative","isRelativeUrl","getNode","getNodesByType","isFile","fieldPath","relativePath","filePath","getFilePath","filePathExists","some","node","absolutePath","module","exports","getFirstValueAt","selector","value","Array","isArray","typeName","split","looksLikeFile","isAbsolute","getType","normalizedPath","find","getAbsolutePath","dir","getBaseDir","withDir","withBaseDir","map","findAncestorNode","internal","type","p","posix","join","childNode","predicate","parent"],"mappings":"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","sourcesContent":["const path = require(`path`)\nconst { slash } = require(`gatsby-core-utils`)\nconst mime = require(`mime`)\nconst isRelative = require(`is-relative`)\nconst isRelativeUrl = require(`is-relative-url`)\nimport { getValueAt } from \"../../utils/get-value-at\"\nconst { getNode, getNodesByType } = require(`../../redux/nodes`)\n\nconst isFile = (fieldPath, relativePath) => {\n  const filePath = getFilePath(fieldPath, relativePath)\n  if (!filePath) return false\n  const filePathExists = getNodesByType(`File`).some(\n    node => node.absolutePath === filePath\n  )\n  return filePathExists\n}\n\nmodule.exports = {\n  isFile,\n}\n\nconst getFirstValueAt = (node, selector) => {\n  let value = getValueAt(node, selector)\n  while (Array.isArray(value)) {\n    value = value[0]\n  }\n  return value\n}\n\nconst getFilePath = (fieldPath, relativePath) => {\n  const [typeName, ...selector] = Array.isArray(fieldPath)\n    ? fieldPath\n    : fieldPath.split(`.`)\n\n  if (typeName === `File`) return null\n\n  const looksLikeFile =\n    !path.isAbsolute(relativePath) &&\n    mime.getType(relativePath) !== null &&\n    // FIXME: Do we need all of this?\n    mime.getType(relativePath) !== `application/x-msdownload` &&\n    isRelative(relativePath) &&\n    isRelativeUrl(relativePath)\n\n  if (!looksLikeFile) return null\n\n  const normalizedPath = slash(relativePath)\n  const node = getNodesByType(typeName).find(\n    node => getFirstValueAt(node, selector) === normalizedPath\n  )\n\n  return node ? getAbsolutePath(node, normalizedPath) : null\n}\n\nconst getAbsolutePath = (node, relativePath) => {\n  const dir = getBaseDir(node)\n  const withDir = withBaseDir(dir)\n  return dir\n    ? Array.isArray(relativePath)\n      ? relativePath.map(withDir)\n      : withDir(relativePath)\n    : null\n}\n\nconst getBaseDir = node => {\n  if (node) {\n    const { dir } =\n      findAncestorNode(node, node => node.internal.type === `File`) || {}\n    return dir\n  }\n  return null\n}\n\nconst withBaseDir = dir => p => path.posix.join(dir, slash(p))\n\nconst findAncestorNode = (childNode, predicate) => {\n  let node = childNode\n  do {\n    if (predicate(node)) {\n      return node\n    }\n  } while ((node = node.parent && getNode(node.parent)))\n  return null\n}\n"],"file":"is-file.js"}